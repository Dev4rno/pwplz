from dotenv import load_dotenv
import os
import pytest
from unittest.mock import patch, mock_open
from generator import PasswordGenerator, PasswordType
import re

load_dotenv()
#-=-=-=-=-=-=-=-=-=->

WORDS = os.getenv("DICEWARE_WORDS")
MIN_LENGTH = int(os.getenv("MIN_LENGTH"))

#-=-=-=-=-=-=-=-=-=->

@pytest.fixture
def generator():
    return PasswordGenerator(min_length=MIN_LENGTH, words=WORDS)

#-=-=-=-=-=-=-=-=-=->

@pytest.fixture(autouse=True)
def mock_word_file():
    with patch("builtins.open", mock_open(read_data="word1\nword2\nword3")):
        yield

#-=-=-=-=-=-=-=-=-=->

def test_create_random_password_length(generator):
    """
    Tests the length of a randomly generated password.
    
    This test verifies that the password generated by the 
    `_create_random_password` method has a length equal to the 
    minimum length defined in the `PasswordGenerator` instance.
    """
    password = generator._create_random_password()
    assert len(password) == generator.min_length

#-=-=-=-=-=-=-=-=-=->

def test_create_random_password_complexity(generator):
    """
    Tests the complexity of a randomly generated password.
    
    This test checks that the password generated by the 
    `_create_random_password` method contains at least one 
    character from each of the specified character sets: 
    lowercase letters, uppercase letters, digits, and 
    punctuation, ensuring that the generated password 
    meets the defined complexity requirements.
    """
    password = generator._create_random_password()
    charsets = generator.charsets
    assert any(c in password for c in charsets[0])  # Lowercase
    assert any(c in password for c in charsets[1])  # Uppercase
    assert any(c in password for c in charsets[2])  # Digits
    assert any(c in password for c in charsets[3])  # Punctuation

#-=-=-=-=-=-=-=-=-=->

def test_uuid_password(generator):
    """
    Tests the format of a UUID-based password.
    
    This test ensures that the password generated by the 
    `_create_uuid_password` method conforms to the standard 
    UUID format, which is a 36-character string consisting 
    of hexadecimal digits and hyphens in specific positions.
    """
    uuid_password = generator._create_uuid_password()
    assert re.match(r'[a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}', uuid_password)

#-=-=-=-=-=-=-=-=-=->

def test_hash_password(generator):
    """
    Tests the length of a hashed password
    
    This test verifies that the password generated by the 
    `_create_hash_password` method produces a string of 
    length 64, which corresponds to the expected length 
    of a SHA-256 hash in hexadecimal representation.
    """
    hash_password = generator._create_hash_password()
    assert len(hash_password) == 64  # SHA-256 produces a 64 character hex digest

#-=-=-=-=-=-=-=-=-=->

def test_bcrypt_password(generator):
    """
    Tests the prefix of a bcrypt password.
    
    This test checks that the password generated by the 
    `_create_bcrypt_password` method starts with the prefix 
    '$2b$', indicating that it is a valid bcrypt hash format.
    """
    bcrypt_password = generator._create_bcrypt_password()
    assert bcrypt_password.startswith('$2b$')

#-=-=-=-=-=-=-=-=-=->

def test_argon2_password(generator):
    """
    Tests the format and length of an Argon2 password.
    
    This test ensures that the password generated by the 
    `_create_argon2_password` method starts with the prefix 
    '$argon2' and has a length that meets or exceeds the 
    minimum length specified in the `PasswordGenerator` instance.
    """
    argon2_password = generator._create_argon2_password()
    assert argon2_password.startswith('$argon2')
    assert len(argon2_password) >= generator.min_length

#-=-=-=-=-=-=-=-=-=->

def test_diceware_password(generator):
    """
    Tests the validity of a Diceware-generated password.
    
    This test checks that the password generated by the 
    `_create_diceware_password` method consists of words 
    that are present in a predefined list and that the 
    total length of the generated password meets the 
    minimum length requirement.
    """
    diceware_password = generator._create_diceware_password()
    words = diceware_password.split('-')
    assert all(word in WORDS.split("-") for word in words)
    assert len(diceware_password) >= generator.min_length

#-=-=-=-=-=-=-=-=-=->

def test_all_passwords(generator):
    """
    Tests the generation of all password types.
    
    This test verifies that the `_generate_all_passwords` 
    method returns passwords for all defined password types 
    within the `PasswordType` enumeration, ensuring comprehensive 
    coverage of the password generation functionality.
    """
    passwords = generator._generate_all_passwords()
    for password_type in PasswordType:
        assert password_type.value in passwords, f"Missing {password_type.value} password."

#-=-=-=-=-=-=-=-=-=->

def test_zero_min_length():
    """
    Tests password generation with a minimum length of zero.
    
    This test ensures that when the `PasswordGenerator` is 
    initialized with a minimum length of zero, the 
    `_create_random_password` method produces a password 
    of length 4, adhering to the minimum complexity 
    constraints defined in the class.
    """
    generator = PasswordGenerator(min_length=0, words=WORDS)
    random_password = generator._create_random_password()
    assert len(random_password) == 4  # minimum complexity should produce 4 characters

#-=-=-=-=-=-=-=-=-=->

def test_minimum_length_of_one():
    """
    Tests password generation with a minimum length of one.
    
    This test verifies that when the `PasswordGenerator` is 
    set with a minimum length of one, the 
    `_create_random_password` method still generates a 
    password of length 4, confirming compliance with 
    the complexity requirements.
    """
    generator = PasswordGenerator(min_length=1, words=WORDS)
    random_password = generator._create_random_password()
    assert len(random_password) == 4  # minimum complexity should produce 4 characters

#-=-=-=-=-=-=-=-=-=->

def test_diceware_with_empty_words():
    """
    Tests Diceware password generation with an empty word list.
    
    This test checks that when the `PasswordGenerator` is 
    initialized with an empty list of words, the 
    `_create_diceware_password` method returns an empty 
    string, confirming that the generator handles empty 
    inputs gracefully.
    """
    generator = PasswordGenerator(min_length=10, words="")
    diceware_password = generator._create_diceware_password()
    assert diceware_password == ""

#-=-=-=-=-=-=-=-=-=->

def test_random_password_type_selection(generator):
    """
    Tests random selection of password types.
    
    This test verifies that the 
    `_get_random_password_type` method returns a valid 
    password type from the predefined `PasswordType` 
    enumeration, ensuring that the selection process 
    is functioning correctly.
    """
    password_type = generator._get_random_password_type()
    assert password_type in [ptype.value for ptype in PasswordType]

if __name__ == "__main__":
    pytest.main()